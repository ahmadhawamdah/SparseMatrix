Ahmad Hawamdah
10/28/2019

In this program, a calculator is created for performing matrix operations including sum, difference, product, transpose, and scalar multiplication that exploits the (expected) sparseness of its matrix operands. Non-zero entires are not included due to efficiency and time complexity.
 
Matrix functions:
newMatrix()
Returns a reference to a new nXn Matrix object in the zero state.

freeMatrix()
Frees heap memory associated with *pM, sets *pM to NULL.

Access functions:
size()
Return the size of square Matrix M.

NNZ()
Return the number of non-zero elements in M.

equals()
Return true (1) if matrices A and B are equal, false (0) otherwise.

Manipulation procedures:
makeZero()
Re-sets M to the zero Matrix.

changeEntry()
Changes the ith row, jth column of M to the value x. Pre: 1<=i<=size(M), 1<=j<=size(M)

Matrix Arithmetic operations:
copy()
Returns a reference to a new Matrix object having the same entries as A.

transpose()
Returns a reference to a new Matrix object representing the transpose of A.

scalarMult()
Returns a reference to a new Matrix object representing xA.

sum()
Returns a reference to a new Matrix object representing A+B. pre: size(A)==size(B)

diff()
Returns a reference to a new Matrix object representing A-B. pre: size(A)==size(B)

product()
Returns a reference to a new Matrix object representing AB pre: size(A)==size(B)

printMatrix()
Prints a string representation of Matrix M to filestream out. Zero rows are not printed. Each non-zero is represented as one line consisting of the row number, followed by a colon, a space, then a space separated list of pairs "(col, val)" giving the column numbers and non-zero values in that row. The double val will be rounded to 1 decimal point.

List functions:
newList()
Creates and returns a new empty List.

freeList();
Frees all heap memory associated with *pL, and sets *pL to NULL.

Access functions:
length()
Returns the number of elements in L.

index()
Returns index of cursor element if defined, -1 otherwise.

front()
Returns front element of L. Pre: length()>0

back()
Returns back element of L. Pre: length()>0

get()
Returns cursor element of L. Pre: length()>0, index()>=0

isEmpty()
checks if a list is empty

getData()
Returns true (1) iff Lists A and B are in same
state, and returns false (0) otherwise.

Manipulation procedures:
clear()
Resets L to its original empty state.

moveFront()
If L is non-empty, sets cursor under the front element, otherwise does nothing.

moveBack()
If L is non-empty, sets cursor under the back element, otherwise does nothing.

movePrev()
If cursor is defined and not at front, move cursor one step toward the front of L; if cursor is defined and at front, cursor becomes undefined; if cursor is undefined do nothing

moveNext()
If cursor is defined and not at back, move cursor one step toward the back of L; if cursor is defined and at back, cursor becomes undefined; if cursor is undefined do nothing

prepend()
Insert new element into L. If L is non-empty, insertion takes place before front element.

append()
Insert new element into L. If L is non-empty, insertion takes place after back element.

insertBefore()
Insert new element before cursor. Pre: length()>0, index()>=0

insertAfter()
Insert new element after cursor. Pre: length()>0, index()>=0

void deleteFront()
Delete the front element. Pre: length()>0

void deleteBack()
Delete the back element. Pre: length()>0

void delete()
Delete cursor element, making cursor undefined. Pre: length()>0, index()>=0

copyList()
Returns a new List representing the same integer sequence as L. The cursor in the new list is undefined,
regardless of the state of the cursor in L. The state of L is unchanged.



